/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var __async = (__this, __arguments, generator) => {
  return new Promise((resolve, reject) => {
    var fulfilled = (value) => {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    };
    var rejected = (value) => {
      try {
        step(generator.throw(value));
      } catch (e) {
        reject(e);
      }
    };
    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);
    step((generator = generator.apply(__this, __arguments)).next());
  });
};

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => ScriptLauncher
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
var { spawn } = require("child_process");
var fs = require("fs");
var ScriptLauncher = class extends import_obsidian.Plugin {
  constructor() {
    super(...arguments);
    this.scripts = [];
    this.barElements = [];
    this.verifyidScripts = /* @__PURE__ */ new Set();
  }
  onload() {
    return __async(this, null, function* () {
      yield this.loadSettings();
      this.createIcons();
      this.addSettingTab(new ScriptLauncherSettingTab(this.app, this));
      for (const script of this.scripts) {
        if (script.runOnStartup) {
          this.runScript(script);
        }
      }
      this.addCommand({
        id: "run-script",
        name: "Run script",
        editorCallback: (editor, view) => {
          new ScriptSelectionModal(this).open();
        }
      });
    });
  }
  onunload() {
  }
  exists(path) {
    try {
      return fs.lstatSync(path).isFile();
    } catch (e) {
      return false;
    }
  }
  createIcons() {
    var _a;
    for (const el of this.barElements) {
      el.remove();
    }
    for (const script of this.scripts) {
      if (!script.showOnBottomBar)
        continue;
      if (!this.verifyidScripts.has(script.path) && !this.exists(script.path))
        continue;
      this.verifyidScripts.add(script.path);
      const statusBarItemEl = this.addStatusBarItem();
      statusBarItemEl.setText((_a = script.icon) != null ? _a : script.name);
      statusBarItemEl.onClickEvent((_) => {
        this.runScript(script);
      });
      this.barElements.push(statusBarItemEl);
    }
  }
  loadSettings() {
    return __async(this, null, function* () {
      let scripts = yield this.loadData();
      if (!scripts)
        scripts = [];
      this.scripts = scripts;
    });
  }
  saveSettings() {
    return __async(this, null, function* () {
      yield this.saveData(this.scripts);
    });
  }
  runScript(script) {
    const process = spawn(script.path, [this.getVaultPath(), this.getFilePath()], { shell: true });
    process.stdout.on("data", (data) => {
      console.log(`stdout: ${data}`);
      new import_obsidian.Notice(data);
    });
    process.stderr.on("data", (data) => {
      console.log(`stderr: ${data}`);
      new import_obsidian.Notice(data);
    });
    process.on("error", (error) => {
      new import_obsidian.Notice(`error: ${error}`);
    });
    if (script.showExitCode)
      process.on("close", (code) => {
        new import_obsidian.Notice(`child process exited with code ${code}`);
      });
  }
  getVaultPath() {
    const adapter = app.vault.adapter;
    if (adapter instanceof import_obsidian.FileSystemAdapter) {
      return adapter.getBasePath();
    }
    return null;
  }
  getFilePath() {
    var _a;
    if (app.workspace.getActiveFile() == null)
      return "";
    return (_a = app.workspace.getActiveFile()) == null ? void 0 : _a.path;
  }
};
var ScriptLauncherSettingTab = class extends import_obsidian.PluginSettingTab {
  constructor(app2, plugin) {
    super(app2, plugin);
    this.plugin = plugin;
  }
  display() {
    this.createSettings();
  }
  onSettingsChange() {
    return __async(this, null, function* () {
      this.plugin.createIcons();
      yield this.plugin.saveSettings();
    });
  }
  createSettings() {
    const { containerEl } = this;
    containerEl.empty();
    containerEl.createEl("h2", { text: "Script Launcher Settings" });
    for (let i = 0; i < this.plugin.scripts.length; i++) {
      const script = this.plugin.scripts[i];
      new import_obsidian.Setting(containerEl).setName("========= Script " + i + " =========");
      new import_obsidian.Setting(containerEl).setName("Script name").addText((text) => text.setPlaceholder("Unnamed").setValue(script.name).onChange((value) => __async(this, null, function* () {
        script.name = value;
        yield this.onSettingsChange();
      })));
      new import_obsidian.Setting(containerEl).setName("Script path").addText((text) => text.setPlaceholder("path to file").setValue(script.path).onChange((value) => __async(this, null, function* () {
        script.path = value;
        yield this.onSettingsChange();
      })));
      new import_obsidian.Setting(containerEl).setName("Show on bottom bar").addToggle((toggle) => {
        var _a;
        toggle.setValue((_a = script.showOnBottomBar) != null ? _a : false).onChange((v) => __async(this, null, function* () {
          script.showOnBottomBar = v;
          yield this.onSettingsChange();
        }));
      });
      new import_obsidian.Setting(containerEl).setName("Run on startup").addToggle((toggle) => {
        var _a;
        toggle.setValue((_a = script.runOnStartup) != null ? _a : false).onChange((v) => __async(this, null, function* () {
          script.runOnStartup = v;
          yield this.onSettingsChange();
        }));
      });
      new import_obsidian.Setting(containerEl).setName("Show exit code").addToggle((toggle) => {
        var _a;
        toggle.setValue((_a = script.showExitCode) != null ? _a : false).onChange((v) => __async(this, null, function* () {
          script.showExitCode = v;
          yield this.onSettingsChange();
        }));
      });
      new import_obsidian.Setting(containerEl).setName("Icon").addText((text) => {
        var _a;
        return text.setPlaceholder("icon").setValue((_a = script.icon) != null ? _a : "").onChange((value) => __async(this, null, function* () {
          script.icon = value;
          yield this.onSettingsChange();
        }));
      });
      new import_obsidian.Setting(containerEl).setName("Delete").addButton((button) => {
        button.setIcon("trash").onClick((evt) => __async(this, null, function* () {
          this.plugin.scripts.remove(script);
          this.createSettings();
          yield this.onSettingsChange();
        }));
      });
    }
    new import_obsidian.Setting(containerEl).setName("Add Script").addButton((button) => button.setIcon("plus-with-circle").onClick((evt) => __async(this, null, function* () {
      this.plugin.scripts.push({
        name: "Unnamed",
        path: ""
      });
      yield this.plugin.saveSettings();
      this.createSettings();
    })));
  }
  openFilePicker() {
    return __async(this, null, function* () {
      return new Promise((resolve) => {
        const input = document.createElement("input");
        input.type = "file";
        input.onchange = (event) => {
          const target = event.target;
          if (target.files && target.files.length > 0) {
            resolve(target.files[0].name);
          } else {
            resolve(null);
          }
        };
        input.click();
      });
    });
  }
};
var ScriptSelectionModal = class extends import_obsidian.SuggestModal {
  constructor(plugin) {
    super(plugin.app);
    this.plugin = plugin;
  }
  getSuggestions(query) {
    return this.plugin.scripts.filter((script) => script.name.toLowerCase().includes(query.toLowerCase()));
  }
  renderSuggestion(script, el) {
    el.createEl("div", { text: script.name });
  }
  onChooseSuggestion(script, evt) {
    this.plugin.runScript(script);
  }
};

/* nosourcemap */